cmds_run=Commands run in generating this page
whats_this_title=What's this?
state_enable=Enable
state_disable=Disable
state_refresh=Refresh
state_restart=Restart
state_maintenance=Maintenance
state_degraded=Degraded
state_clear=Clear
index_title=Service Management Facility
index_detail=SMF Service Listing
index_svc_type=Select Service Type
index_extraopts=Add extra options to view
index_include_disabled=Include Disabled Services?
index_apply=Apply to Checked Items
index_sort_by=Sort by
index_create_new_service=Create New Service
index_search_instance=Search for Services
index_select=Select
index_delete=Delete
index_Select=Select
index_FMRI=FMRI
index_INST=INST
index_STATE=STATE
index_DESC=DESC
index_NSTATE=NSTATE
index_SCOPE=SCOPE
index_STIME=STIME
index_deleteconfirm=Are you sure you want to permanently delete the selected service(s)?
search_instance_title=Search
search_instance_detail=Search/Browse for Service Instance(s)
search_instance_go=Go!
search_instance_browse=Browse for Service
search_instance_noresults=No results for this search!
instance_viewer_title=Instance Information
instance_viewer_detail=Instance Details
instance_viewer_goto_pgroup_editor=View/Edit Property Groups/Properties
instance_viewer_goto_dep_viewer=View Dependency/Dependent Trees
dep_viewer_title=Dependencies/Dependents
dep_viewer_detail=Dependency/Dependent Trees for Instance
dep_viewer_apply=Apply to Checked Items
dep_viewer_depy_info=Dependency Tree
dep_viewer_dept_info=Dependent Tree
dep_viewer_back=instance viewer
state_editor_title=Service State Information
state_editor_detail=Instance State Details
state_editor_stateinfo=Instance State Information
state_editor_apply=Apply to Checked Items
state_editor_depy_info=Dependency Information
state_editor_dept_info=Dependent Information
log_viewer_title=Logfile Viewer
log_viewer_detail=View (end of) Log File
log_viewer_show_last=Show last
log_viewer_num_lines=lines in
log_viewer_submit=Update View
property_group_editor_title=Property Group Information
property_group_editor_detail=Property Groups for Service
property_group_editor_addsinst=Select Service/Instance
property_group_editor_addname=New Property Group Name
property_group_editor_addtype=New Property Group Type
property_group_editor_addpg=Add New Property Group
property_group_editor_add=Add
property_group_editor_apply=Apply to Checked Items
property_group_editor_deleteconfirm=Are you sure you want to permanently delete the selected property group(s)?
property_group_editor_delete=Delete
property_group_editor_select=Select
property_group_editor_sinst=Service/Instance
property_group_editor_pgroup_name=Property Group Name
property_group_editor_pgroup_type=Property Group Type
property_group_editor_back=instance viewer
property_editor_title=Property Information
property_editor_detail=Properties for Service/Property Group
property_editor_addprop=Add New Property
property_editor_addname=New Property Name
property_editor_addtype=New Property Type
property_editor_addvalue=New Property Value
property_editor_add=Add
property_editor_apply=Apply to Checked Items
property_editor_deleteconfirm=Are you sure you want to permanently delete the selected property/properties?
property_editor_delete=Delete
property_editor_select=Select
property_editor_prop_name=Property Name
property_editor_prop_type=Property Type
property_editor_prop_value=Property Value
property_editor_update=Update
property_editor_back=property groups
whats_this=(What's this?)
close_window=Close Window
svc_chooser_titlesvc=Choose Service FMRI
svc_chooser_titleinst=Choose Service Instance FMRI
svc_chooser_titleboth=Choose Service/Instance FMRI
svc_chooser_ok=OK
svc_chooser_cancel=Cancel
svc_chooser_fmri=Service FMRI Tree Location $1
path_chooser_title=Choose Path FMRI
path_chooser_ok=OK
path_chooser_cancel=Cancel
path_chooser_path=Path FMRI Tree Location $1
editserv_title=Edit SMF Service
editserv_newtitle=Create new SMF Service
editserv_propviewer=Create/View/Modify Service
editserv_service_detail=Service Details
editserv_bundle_name=Service Bundle Name
editserv_service_name=Service Name
editserv_service_type=Type
editserv_service_version=Version
editserv_stability=Stability
editserv_fmri=Specify FMRI
editserv_instance_detail=Instance Details
editserv_instance_name=Instance Name
editserv_instance_enabled=Enabled?
editserv_serv_instname=Select Service or Instance Level
editserv_restarter_detail=Restarter Details
editserv_depy_detail=Dependency Details
editserv_depy_name=Dependency Name
editserv_depy_type=Dependency Type
editserv_depy_grouping=Dependency Grouping
editserv_depy_restart_on=Restart-on Value
editserv_dept_detail=Dependent Details
editserv_dept_name=Dependent Name
editserv_dept_grouping=Dependent Grouping
editserv_dept_restart_on=Restart-on Value
editserv_exec_detail=Execute Method Details
editserv_exec_name=Execute Method Name
editserv_exec_timeout_seconds=Timeout (seconds)
editserv_exec_exec=Execute Method Path
editserv_exec_user=User Method Credential
editserv_exec_group=Group Method Credential
editserv_exec_privileges=Privileges
editserv_pgroup_detail=Property Group Details
editserv_pgroup_name=Property Group Name
editserv_pgroup_type=Property Group Type
editserv_sinst_pgroup_name=[Service/Instance].[Property_Group]
editserv_prop_detail=Property Details
editserv_prop_name=Property Name
editserv_prop_type=Property Type
editserv_prop_value=Property Value
editserv_template_detail=Template Details
editserv_template_common_name=Common Name
editserv_template_description=Description
editserv_man_detail=Manpage details
editserv_man_title=Title
editserv_man_section=Section
editserv_man_manpath=Manpath
editserv_update=Update
editserv_new=New
editserv_finish=Finish
editserv_cancel=Cancel
editserv_add=Add
editserv_addnew=Add New
editserv_createservice=Create Service
editserv_next=Next
editserv_continue=Continue
editserv_skip=Skip
editserv_clear=Clear
editserv_restarter_fmri=Restarter FMRI
editserv_dependency=Dependency
editstate_detail=Edit Service State
editstate_stateinfo=Instance State Information
editstate_depy_detail=Instance Dependency Information
editstate_dept_detail=Instance Dependent Information
editstate_enable=Enable
editstate_disable=Disable
editstate_refresh=Refresh
editstate_restart=Restart
editstate_clear=Clear
editstate_maintenance=Maintenance
editstate_degraded=Degraded
whats_this_stateinfo=Displayed is information pertaining to the service instance state, as garnered from the svcs command. See: svcs(1). See: smf(5).
whats_this_extraopts=Check these additional options, and click Update View if you want to see them in the service listing below. The meaning of the options can be found in the svcs manpage. See: svcs(1).
whats_this_enabledonly=Select whether you want enabled services only to be displayed, or if you want all services (enabled and disabled) in the listing.
whats_this_create_new_service=Click here if you want to add a new service.
whats_this_serviceviewer=The service viewer provides a categorical view of the services available/running on the system and their states, based on the listing provided by the svcs command. Clicking on a particular tab shows services specific to that category, e.g. Network holds all services of the form svc:/network. Multiple enable/disable/refresh/restart/maintenance/degraded/clear/delete operations can be carried out by checking the candidate service instances and clicking the relevant apply button. Individual services/instances can be edited by clicking on the fmri or instance respectively, and the state of an individual service instance can be examined by clicking on the state. See: svcs(1).
whats_this_apply=You can carry out operations on multiple items in the service listing by checking the appropriate services and using these buttons. See: svcadm(1M).
whats_this_FMRI=The FMRI is a Universal Resource Indicator (URI) that specifies a particular service. Under the 'All' list, the full FMRI is displayed, but under particular service categories, e.g. network, the network category is not displayed. Clicking on a particular service FMRI will bring you to the service viewer where you can edit that service's properties with immediate effect (so be careful!). See: smf(5). See: svcs(1).
whats_this_INST=The instance is the instance name associated with the service FMRI adjacent. A given service may have multiple instances. Clicking on the instance will bring you to the service viewer, but will only allow you to update properties for that instance. If you want to update service-level and other instance properties, click on the service FMRI. See: smf(5). See: svcs(1).
whats_this_STATE=The state of the particular instance. The meanings of the various states are described in the smf manpage. See: smf(5). See: svcs(1).
whats_this_DESC=A textual description of the service. See: smf(5). See: svcs(1).
whats_this_NSTATE=The next state of the service, useful when the service is transitioning. A '-' indicates it is not transitioning. See: svcs(1).
whats_this_SCOPE=The scope name of the service instance. See: smf(5). See: svcs(1).
whats_this_STIME=The time (if today) or date the service entered the current state. See: smf(5). See: svcs(1).
whats_this_Select=Check the list of services you want to enable/disable/refresh etc here.

whats_this_service_detail=Specify/edit toplevel service information here: service name, version number, bundle name for manifest and stability. See: smf(5). See: svccfg(1M). See: service_bundle(4).
whats_this_bundle_name=Name of service bundle in manifest. Multiple services can be bundled in the one manifest, but the name here isnt important. For already-existing services, it will be set to export as this is what svccfg does when it exports a manifest from the SMF repository. See: svccfg(1M). See: service_bundle(4).
whats_this_service_name=Name of service. Convention is to use the format [general_service_category]/[name]. Categories already provided include application (higher-level applications), milestone (collections of other services, such as name services), platform (platform-specific services), system (Solaris system services), device (device-specific services), network (network/internet services) and site (site-sepecific descriptions). You can also specify your own category of course, but most services should fit comfortably in one of the above. See: smf(5).
whats_this_service_version=Specify the version number of the service.
whats_this_instance_detail=Specify/edit instance information here: instance name and whether it is to be enabled by default or not. See: smf(5).
whats_this_instance_name=Specify the instance name. Services with only one instance generally use default as the instance name (e.g. inetd). Services which allow multiple instances of the same binary running with different configurations will require multiple instances, e.g. the chargen inetd service, which requires a stream and datagram-based version running on different ports. See: smf(5).
whats_this_instance_enabled=Specify if you want this service instance to be enabled by default or not.
whats_this_serv_instname=Specify whether you want to update information at the service or instance level. If a property, dependency etc exists at both the service and instance level, the instance-level value is used for that specific instance, otherwise it inherits the service-level value. This allows instances to selectively inherit values from the service-level specification, while being able to set values that they may require uniquely.
whats_this_stability=Specify the stability value, - means leave unset.
whats_this_fmri=Specify the relevant service/instance FMRI.
whats_this_restarter_detail=By default, services use the master restarter (system/restarter service) to control their behaviour. Delegated restarters such as inetd can also be specified. As the name suggests, this involves relying on the delegated restarter to handle start/stop of services, and in the case of inetd these methods have different names to differentiate from master restarter-based services. See: inetd(1M). See: svc.startd(1M). See: smf_restarter(5).
whats_this_exec_detail=Execute methods are the heart of an smf service, it is where you specify what programs to run on start/stopping the service. Services that use a delegated restarter (like inetd) have their own start/stop methods (e.g. inetd_start, inetd_stop), but services using the master restarter will generally specify a start and stop method at a minimum. See: svc.startd(1M). See: smf_method(5). See: inetd(1M).
whats_this_exec_name=Provide a unique name for this execute method here. For services using the master restarter, start and stop methods are mandatory, and run respectively when the service is enabled and dependencies met; when a dependency goes offline, the service fails, the adminstrator disables the service etc. See: smf_method(5). See: inetd(1M).
whats_this_exec_timeout_seconds=Methods that exceed their timeouts will be killed. For unbounded methods, set timeout to 0.
whats_this_exec_exec=Provide path to execute method plus arguments. Keywords :kill and :true are provided and can be used as exec methods. The former kills all process started by the service, the latter simply returns success to the restarter. Method tokens can also be used to pass smf-related info to the method. See: smf_method(5).
whats_this_exec_user=Specify an override to the default method enviroment value for user (the default method environment is inherited from init).
whats_this_exec_group=Specify an override to the default method enviroment valuefor group (the default method environment is inherited from init). 
whats_this_exec_privileges=Specify an override to the default method enviroment privileges.
whats_this_depy_detail=Dependencies provide a way of specifying what services your service requires to be (sometimes not) running before it runs. Calling out dependencies is one of the key benefits of SMF, as it imposes a deterministic structure on what was a very tangled web of init scripts etc. Dependencies provide a lot of flexibility in that you can specify that your service will wait for a particular dependency to come online, wait for one member of a group (e.g. whichever nameservice is configured), or even only run if another service isnt running. See: smf(5).
whats_this_depy_name=Provide a unique name for this dependency here.
whats_this_depy_type=Select dependency type (path or service). Path dependencies require the named file to be in place (?). An example of a valid fmri for a path dependency would be file:://localhost/path2file. Service dependencies are just fmris identifying the service depended upon.
whats_this_depy_grouping=Select a grouping value for your dependency. Grouping values determine the nature of the dependency relation. For example, for require_all, all dependencies in group need to be online/degraded before the service starts, while for require_any, any of the group are required to be online/degraded. For optional_all, all enabled and able-to-run services must be online, while for exclude_all, if the dependency is online/degraded, the service should not be run.
whats_this_depy_restart_on=Specify the fault propogation model here, i.e. how should my service react to faults in the dependency? Values are none (we dont care about the dependency after startup), fault (restart if the dependency has a fault), restart (restart if the dependency is restarted), and refresh (restart if the dependency is refreshed).
whats_this_dept_detail=Dependents might seem a little confusing - why have a mechanism to specify what services depend on my service, cant i just add a dependency in the candidate dependent? Dependents address the situation where you dont own the dependent manifest and cant do this. As a consequence, dependents look very much like dependencies, but rather than specifying that the current service depends on this dependency, we are saying that the current service is a dependency for this child service/dependent. See: smf(5).
whats_this_dept_name=Provide a unique name for this dependent here.
whats_this_dept_grouping=Select a grouping value which this service will adhere to for its dependent.  Grouping values determine the nature of the dependency relation. For example, for require_all, all services in the group that specify the dependent need to be online/degraded before the dependent starts, while for require_any, any of the group are required to be online/degraded. For optional_all, all enabled and able-to-run services must be online, while for exclude_all, if the service is online/degraded, the dependent service should not be run.
whats_this_dept_restart_on=Specify the fault propogation model here, i.e. how should this service propogate faults to its dependent?  Values are none (dependent doesnt care about the service after startup), fault (restart dependent if the service has a fault), restart (restart dependent if the service is restarted), and refresh (restart dependent if the service is refreshed).
whats_this_pgroup_detail=In smf, all service information, dependencies, exec methods etc are stored as properties within property groups. In addition, services may need to specify other properties, e.g. inetd services need to specify properties that the inetd delegated restarter understands and needs. Services can also store their own application data in properties. See: smf(5).
whats_this_pgroup_name=Specify property group name. See: smf(5).
whats_this_pgroup_type=Specify property group type. See: smf(5).
whats_this_sinst_pgroup_name=Select property group at appropriate service/instance level. This allows creation/update of properties at both instance-specific and service level.
whats_this_prop_detail=Properties are associated with property groups and used to store service-relevant information. See: smf(5).
whats_this_prop_name=Specify property name. See: smf(5).
whats_this_prop_type=Specify property type. Valid types are count, integer, opaque, host, hostname, net_address_v4, net_address_v6, time, astring, ustring, boolean, fmri, uri. See: smf(5).
whats_this_prop_value=Specify property value. See: smf(5).
whats_this_man_detail=Provide information regarding manpage documentation for service. See: man(1).
whats_this_man_title=Specify manpage title. See: man(1).
whats_this_man_section=Specify manpage section. See: man(1).
whats_this_man_manpath=Specify manpath. See: man(1).
whats_this_template_detail=Provide details of service, its commonly used name and a description of what the service does.
whats_this_template_common_name=Specify common name for service.
whats_this_template_description=Describe the service.
wizard_back=Back
wizard_next=Next
wizard_add=Add
wizard_update=Update
wizard_new=New
wizard_remove=Remove
wizard_finish=Finish
smfwizard_title=Create SMF Service
smfwizard_service_heading=Enter Service Information
smfwizard_service_description=Specify/edit toplevel service information here. For service name, the convention is to use the format [general_service_category]/[name]. Categories already provided include application (higher-level applications), milestone (collections of other services, such as nameservices), platform (platform-specific services), system (Solaris system services), device (device-specific services), network (network/internet services) and site (site-sepecific descriptions). You can also specify your own category of course, but most services should fit comfortably in one of the above. Also specify an integer version number. See: smf(5). See: svccfg(1M). See: service_bundle(4).
smfwizard_service_name=Enter Service Name
smfwizard_service_name_error=*Name must be non-null!*
smfwizard_service_version=Enter Service Version
smfwizard_service_version_error=*Version must be a positive number!*
smfwizard_instance_heading=Enter Instance Information
smfwizard_instance_description=Specify the instance name. Services with only one instance generally use default as the instance name (e.g. inetd). Services which allow multiple instances of the same binary running with different configurations will require multiple instances, e.g. the chargen inetd service, which requires both a stream and datagram-based version running on the same port. See: smf(5).
smfwizard_instance_name=Specify Instance Name
smfwizard_instance_name_error=*Name must be non-null!*
smfwizard_instance_enabled=Specify if you want this service instance to be enabled by default or not.
smfwizard_instance_enabled_error=*Enabled must be true/false*
smfwizard_sinst_name=Select Service/Specific Instance that Properties apply to
smfwizard_sinst_error=*Service or Instance Must be Selected!*
smfwizard_restarter_heading=Enter Restarter Information
smfwizard_restarter_description=By default, services use the master restarter (system/restarter service) to control their behaviour. Delegated restarters such as inetd can also be specified. As the name suggests, this involves relying on the delegated restarter to handle start/stop of services, and in the case of inetd these methods have different names to differentiate from master restarter-based services. See: inetd(1M). See: svc.startd(1M). See: smf_restarter(5).
smfwizard_restarter_fmri=Enter FMRI identifying restarter
smfwizard_restarter_fmri_error=*Not a valid FMRI!*
smfwizard_dependency_heading=Enter Dependency Information
smfwizard_dependency_description=Dependencies provide a way of specifying what services your service requires to be (sometimes not) running before it runs. Calling out dependencies is one of the key benefits of SMF, as it imposes a deterministic structure on what was a very tangled web of init scripts etc. Dependencies provide a lot of flexibility in that you can specify groupings that signify your service will wait for all dependencies to come online (require_all), wait for any member of a group (require_any), wait for all enabled members (optional_all), or even only run if group isnt enabled (exclude_all). Also specify the fault propogation model here, i.e. how should my service react to faults in the dependency? Values are none (we dont care about the dependency after startup), fault (restart if the dependency has a fault), restart (restart if the dependency is restarted), and refresh (restart if the dependency is refreshed). Finally specify the fmri identifying the dependency and the stability (optional). See: smf(5).
smfwizard_dependency_name=Enter Dependency Name
smfwizard_dependency_name_error=*Name must be non-null!*
smfwizard_dependency_type=Enter Dependency Type
smfwizard_dependency_type_error=*Type must be non-null!*
smfwizard_dependency_grouping=Select Dependency Grouping
smfwizard_dependency_grouping_error=*Grouping must be non-null!*
smfwizard_dependency_restart_on=Select restart-on value
smfwizard_dependency_restart_on_error=*Restart-on value must be non-null!*
smfwizard_dependency_fmri=Enter FMRI identifying dependency
smfwizard_dependency_fmri_error=*Not a valid FMRI!*
smfwizard_dependency_stability=Select dependency stability value
smfwizard_dependency_stability_error=*Stability must be non-null!*
smfwizard_dependent_heading=Enter Dependent Information
smfwizard_dependent_description=Dependents might seem a little confusing - why have a mechanism to specify what services depend on my service, cant i just add a dependency in the candidate dependent? Dependents address the situation where you dont own the dependent manifest and cant do this. As a consequence, dependents look very much like dependencies, but rather than specifying that the current service depends on this dependency, we are saying that the current service is a dependency for this child service/dependent. Like dependencies, we can specify groupings, restart_on values. For dependents, the FMRI refers to the dependent (child) service of course. See: smf(5).
smfwizard_dependent_name=Enter Dependent Name
smfwizard_dependent_name_error=*Name must be non-null!*
smfwizard_dependent_type=Enter Dependent Type
smfwizard_dependent_type_error=*Type must be non-null!*
smfwizard_dependent_grouping=Select Dependent Grouping
smfwizard_dependent_grouping_error=*Grouping must be non-null!*
smfwizard_dependent_restart_on=Select restart-on value
smfwizard_dependent_restart_on_error=*Restart-on value must be non-null!*
smfwizard_dependent_fmri=Enter FMRI identifying dependent
smfwizard_dependent_fmri_error=*Not a valid FMRI!*
smfwizard_dependent_stability=Select dependent stability value
smfwizard_dependent_stability_error=*Stability must be non-null!*
smfwizard_exec_heading=Enter Execute Method Information
smfwizard_exec_description=Execute methods are the heart of an smf service, it is where you specify what programs to run on start/stopping the service. Services that use a delegated restarter (like inetd) have their own names for start/stop methods (inetd_start, inetd_stop), but services using the master restarter will generally specify exec_methods named start and stop method at a minimum. Methods that exceed the timeout value (specified in seconds) will be killed. For unbounded methods, set timeout to 0. For the exec method itself, you must provide a path to the method plus arguments. Keywords :kill and :true are provided and can be used as exec methods. The former kills all processes started by the service, the latter simply returns success to the restarter. Method tokens can also be used to pass smf-related info to the method. Overrides for user/group/privileges can be specified to the default method environment (inherited from init). See: smf_method(5). See: svc.startd(1M). See: inetd(1M).
smfwizard_exec_name=Enter Execute Method Name
smfwizard_exec_name_error=*Name must be non-null!*
smfwizard_exec_timeout=Enter timeout (seconds) after which execute method is killed
smfwizard_exec_timeout_error=*Timeout must be an integer!*
smfwizard_exec_exec=Enter path to execute method plus arguments
smfwizard_exec_exec_error=*Execute method must be non-null!*
smfwizard_exec_user=Specify an override to the default method enviroment user
smfwizard_exec_user_error=*Invalid user!*
smfwizard_exec_group=Specify an override to the default method enviroment group
smfwizard_exec_group_error=*Invalid group!*
smfwizard_exec_privileges=Specify an override to the default method enviroment privileges
smfwizard_exec_privileges_error=*Invalid privileges!*
smfwizard_property_group_heading=Enter Property Group Details
smfwizard_property_group_description=In smf, all service information, dependencies, exec methods etc are stored as properties within property groups. In addition, services may need to specify other properties, e.g. inetd services need to specify properties that the inetd delegated restarter understands and needs. Services can also store their own application data in properties. See: smf(5).
smfwizard_property_group_name=Specify property group name
smfwizard_property_group_name_error=*Name must be non-null!*
smfwizard_property_group_type=Specify property group type
smfwizard_property_group_type_error=*Type must be non-null!*
smfwizard_property_group_stability=Select property_group stability value
smfwizard_property_group_stability_error=*Stability must be non-null!*
smfwizard_property_heading=Enter Property Details
smfwizard_property_description=Properties are associated with property groups and used to store service- or instance-relevant information. See: smf(5).
smfwizard_pgroup_name=Select Property Group
mfwizard_pgroup_name_error=*Property Group must be non-null!*
smfwizard_property_name=Enter Property Name
smfwizard_property_name_error=*Name must be non-null!*
smfwizard_property_type=Select Property Type
smfwizard_property_type_error=*Type must be non-null!*
smfwizard_property_value=Enter Property Value
smfwizard_property_value_error=*Invalid value!*
smfwizard_template_heading=Enter Template Details
smfwizard_template_description=Provide details of service, its commonly used name and a description of what the service does.
smfwizard_template_common_name=Specify common name for service
smfwizard_template_common_name_error=*Common name must be non-null!*
smfwizard_template_svc_description=Describe the service
smfwizard_template_svc_description_error=*Description must be non-null!*
smfwizard_manpage_heading=Enter ManPage Details
smfwizard_manpage_description=Provide information regarding manpage documentation for service. See: man(1).
smfwizard_manpage_title=Specify manpage title
smfwizard_manpage_title_error=*Title must be non-null!*
smfwizard_manpage_section=Specify manpage section
smfwizard_manpage_section_error=*Section must be non-null!*
smfwizard_manpage_manpath=Specify manpath
smfwizard_manpage_manpath_error=*Manpath must be non-null!*
